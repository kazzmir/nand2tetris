// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    /* RAM16K
     * Screen
     * Keyboard
     */

    /* load | bit14 | out
     *  0   |   0   | 0
     *  1   |   0   | 1 = load and not bit14
     *  0   |   1   | 0
     *  1   |   1   | 0
     */
    Not(in=address[14], out=notbit14);
    And(a=load, b=notbit14, out=ramload);

    RAM16K(in=in, load=ramload, address=address[0..13], out=ramout);

    /* load | bit 13 | bit 14 | out
     *  0   |   0    |   0    |  0
     *  1   |   0    |   0    |  0
     *  1   |   0    |   1    |  1 = load and not bit13 and bit14
     *  1   |   1    |   0    |  0
     *  1   |   1    |   1    |  0
     */
    // Mux4Way
    And(a=load, b=address[14], out=screenload1);
    Not(in=address[13], out=notbit13);
    // Xor(a=screenload1, b=address[13], out=screenload);
    And(a=notbit13, b=screenload1, out=screenload);

    Screen(in=in, load=screenload, address=address[0..12], out=screenout);
    Keyboard(out=keyboardout);

    /* 00 -> ram
     * 01 -> ram
     * 10 -> screen
     * 11 -> keyboard
     */

    Mux4Way16(a=ramout, b=ramout, c=screenout, d=keyboardout, sel=address[13..14], out=out);
}
