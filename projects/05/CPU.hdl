// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    /* A instruction
     * 0 vvv vvvv vvvv vvvv
     * load ARegister with v's
     *
     * C instruction
     * 111 a c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
     * a=instruction[12]
     * jumps=instruction[0..2]
     *   j1=instruction[2]
     *   j2=instruction[1]
     *   j3=instruction[0]
     * destination=instruction[3..5]
     *   d1=instruction[5]
     *   d2=instruction[4]
     *   d3=instruction[3]
     * controls=instruction[6..11]
     *   c1=instruction[11]
     *   c2=instruction[10]
     *   c3=instruction[9]
     *   c4=instruction[8]
     *   c5=instruction[7]
     *   c6=instruction[6]
     */

    Not(in=instruction[15], out=isA);
    /* selector = d1. either choose alu output, or the incoming instruction */
    And(a=instruction[15], b=instruction[5], out=useAlu);
    Mux16(a=instruction, b=aluOutput, sel=useAlu, out=aInput);

    Or(a=isA, b=useAlu, out=loadA);

    ARegister(in=aInput, load=loadA, out=aOut, out[0..14]=addressM);

    /* load=d2 */
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=aluOutput, load=loadD, out=dRegisterOut);

    /* write to M is d3, only if instruction[15] is 1, meaning a C instruction */
    And(a=instruction[3], b=instruction[15], out=writeM);

    /* Choose the A register or inM based on the 'a' bit, which is instruction[12] */
    Mux16(a=aOut, b=inM, sel=instruction[12], out=aOrM);

    ALU(x=dRegisterOut, y=aOrM,
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6],
        out=aluOutput, out=outM, zr=aluZero, ng=aluNegative);

    /* load=1 when
     *   j1 and aluNegative
     *   j2 and aluZero
     *   j3 and (not aluNegative and not aluZero)
     */

    And(a=instruction[2], b=aluNegative, out=jump1);
    And(a=instruction[1], b=aluZero, out=jump2);
    /* nand(a, b) = not(and(a, b))
     * not a and not b = not(a or b)
     */
    Or(a=aluNegative, b=aluZero, out=negativeOrZero);
    Not(in=negativeOrZero, out=notNegativeOrZero);
    And(a=instruction[0], b=notNegativeOrZero, out=jump3);

    Or(a=jump1, b=jump2, out=jumpx);
    Or(a=jumpx, b=jump3, out=jumpx1);
    /* Only load PC if this is a C instruction */
    And(a=jumpx1, b=instruction[15], out=loadPC);

    PC(in=aOut, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}
