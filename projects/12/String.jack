// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array chars;
    field int position;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 1){
            let maxLength = 1;
        }
        let chars = Array.new(maxLength);
        let position = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do chars.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return position;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let chars[position] = c;
        let position = position + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (position > 0){
            let position = position - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int out;
        var int i;

        let i = position - 1;
        if (i < 0){
            return 0;
        }

        while (i > (-1)){
            if (chars[i] = 45){
                let out = -out;
            } else {
                let out = (out + chars[i] - 48) * 10;
            }

            let i = i - 1;
        }

        return out;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int i, c;
        var String s;
        var boolean negative;
        let position = 0;
        if (val < 0){
            let negative = true;
            let val = -val;
        }
        let s = this;
        if (val = 0){
            do s.appendChar(48);
            return;
        }

        while (val > 0){
            let i = val / 10;
            let c = val - (i * 10);
            let val = val / 10;
            do s.appendChar(c + 48);
        }

        if (negative){
            do s.appendChar(45);
        }

        do s.reverse();

        return;
    }

    method void reverse(){
        var int i, c;
        var int maxPos;
        let maxPos = position / 2;
        while (i < maxPos){
            let c = chars[i];
            let chars[i] = chars[position-i-1];
            let chars[position-i-1] = c;
            let i = i + 1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
